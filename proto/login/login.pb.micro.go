// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: login.proto

package login

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Login service

type LoginService interface {
	// 小程序登录
	MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	// 手机验证码登录
	PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	// 邮箱验证码登录
	EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PhonePasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*LoginResponse, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "login"
	}
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Login.MiniProgramLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Login.PhoneCodeLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Login.EmailCodeLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) PhonePasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Login.PhonePasswordLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginHandler interface {
	// 小程序登录
	MiniProgramLogin(context.Context, *MiniProgramLoginRequest, *LoginResponse) error
	// 手机验证码登录
	PhoneCodeLogin(context.Context, *PhoneCodeLoginRequest, *LoginResponse) error
	// 邮箱验证码登录
	EmailCodeLogin(context.Context, *EmailCodeLoginRequest, *LoginResponse) error
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PhonePasswordLogin(context.Context, *PasswordLoginRequest, *LoginResponse) error
}

func RegisterLoginHandler(s server.Server, hdlr LoginHandler, opts ...server.HandlerOption) error {
	type login interface {
		MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, out *LoginResponse) error
		PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *LoginResponse) error
		EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *LoginResponse) error
		PhonePasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *LoginResponse) error
	}
	type Login struct {
		login
	}
	h := &loginHandler{hdlr}
	return s.Handle(s.NewHandler(&Login{h}, opts...))
}

type loginHandler struct {
	LoginHandler
}

func (h *loginHandler) MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, out *LoginResponse) error {
	return h.LoginHandler.MiniProgramLogin(ctx, in, out)
}

func (h *loginHandler) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *LoginResponse) error {
	return h.LoginHandler.PhoneCodeLogin(ctx, in, out)
}

func (h *loginHandler) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *LoginResponse) error {
	return h.LoginHandler.EmailCodeLogin(ctx, in, out)
}

func (h *loginHandler) PhonePasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *LoginResponse) error {
	return h.LoginHandler.PhonePasswordLogin(ctx, in, out)
}
